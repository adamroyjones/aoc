* Day 19
** Instructions for running
This assumes that Go v1.21.5 has been installed.

#+begin_src sh
go test ./...
#+end_src

** Approach
The idea of a workflow is in some sense misleading. A part begins at the label
=in=. All of the other labels are only relevant insofar as they are used to
establish links from other workflows. When the links are established, the labels
can be ignored; that is, the true goal is to establish the links or, to put it
differently, the goal is to build the appropriate graph.

A workflow looks like this.

#+begin_src
qqz{s>2770:qs,m<1801:hdj,R}
#+end_src

This is a collection of three rules.

- =s>2770:qs=
- =m<1801:hdj=
- =R=

We can model a rule as being a disjoint union of two possible things.

- Type I: a triple: a predicate that applies to $(x, m, a, s)$ 4-tuples, an edge
  to a rule if the predicate is true, and an edge to a rule if it's false.
- Type II: an enum: accept, reject, or an edge to a rule.

In the above, the first two rules are of type I and the third is of type II. The
"if true" edges point to rules that haven't yet been properly "discovered"; they
are placeholders, known only by their labels. By processing the list of
workflows and filling in the placeholders, we can build a directed acyclic graph
with maybe-labelled edges ("if true" and "if false" emanating from nodes of type
I), a source (the first rule in the =in= workflow), and two sinks (accept,
reject).

For the first part of the problem, we can take a specified part and walk the
graph, checking the part against the predicate to decide which of the two edges
to take when we are at a node (rule) of type I.

For the second part of the problem, we can traverse the graph and, for each path
that reaches the accept sink, we can take the conjunction of all of the
constraints that must have been satisfied for us to have walked that path. We
can then calculate the set of $(x, m, a, s)$ 4-tuples that satisfy that
conjunction. The constraints are such that these sets are products of intervals,
so their size is trivial to calculate; further, given two distinct paths, their
corresponding sets are disjoint. This is because, for the two paths to differ,
they must have diverged and, for them to have diverged, one path must have
walked the "if true" edge emanating from a type I node and the other must have
walked the "if false" counterpart.

Go is less than ideal for modelling things in this way as it lacks disjoint
unions.

** Question
The question as given is as follows.

#+begin_quote
--- Day 19: Aplenty ---

The Elves of Gear Island are thankful for your help and send you on your
way. They even have a hang glider that someone stole from Desert Island; since
you're already going that direction, it would help them a lot if you would use
it to get down there and return it to them.

As you reach the bottom of the relentless avalanche of machine parts, you
discover that they're already forming a formidable heap. Don't worry, though - a
group of Elves is already here organizing the parts, and they have a system.

To start, each part is rated in each of four categories:

- =x=: Extremely cool looking
- =m=: Musical (it makes a noise when you hit it)
- =a=: Aerodynamic
- =s=: Shiny

Then, each part is sent through a series of workflows that will ultimately
accept or reject the part. Each workflow has a name and contains a list of
rules; each rule specifies a condition and where to send the part if the
condition is true. The first rule that matches the part being considered is
applied immediately, and the part moves on to the destination described by the
rule. (The last rule in each workflow has no condition and always applies if
reached.)

Consider the workflow =ex{x>10:one,m<20:two,a>30:R,A}=. This workflow is named
ex and contains four rules. If workflow ex were considering a specific part, it
would perform the following steps in order:

- Rule "=x>10:one=": If the part's =x= is more than =10=, send the part to the
  workflow named =one=.
- Rule "=m<20:two=": Otherwise, if the part's =m= is less than =20=, send the
  part to the workflow named =two=.
- Rule "=a>30:R=": Otherwise, if the part's =a= is more than =30=, the part is
  immediately rejected (=R=).
- Rule "=A=": Otherwise, because no other rules matched the part, the part is
  immediately accepted (=A=).

If a part is sent to another workflow, it immediately switches to the start of
that workflow instead and never returns. If a part is accepted (sent to =A=) or
rejected (sent to =R=), the part immediately stops any further processing.

The system works, but it's not keeping up with the torrent of weird metal
shapes. The Elves ask if you can help sort a few parts and give you the list of
workflows and some part ratings (your puzzle input). For example:

#+begin_src
px{a<2006:qkq,m>2090:A,rfg}
pv{a>1716:R,A}
lnx{m>1548:A,A}
rfg{s<537:gd,x>2440:R,A}
qs{s>3448:A,lnx}
qkq{x<1416:A,crn}
crn{x>2662:A,R}
in{s<1351:px,qqz}
qqz{s>2770:qs,m<1801:hdj,R}
gd{a>3333:R,R}
hdj{m>838:A,pv}

{x=787,m=2655,a=1222,s=2876}
{x=1679,m=44,a=2067,s=496}
{x=2036,m=264,a=79,s=2244}
{x=2461,m=1339,a=466,s=291}
{x=2127,m=1623,a=2188,s=1013}
#+end_src

The workflows are listed first, followed by a blank line, then the ratings of
the parts the Elves would like you to sort. All parts begin in the workflow
named in. In this example, the five listed parts go through the following
workflows:

- ={x=787,m=2655,a=1222,s=2876}=: =in= -> =qqz= -> =qs= -> =lnx= -> =A=
- ={x=1679,m=44,a=2067,s=496}=: =in= -> =px= -> =rfg= -> =gd= -> =R=
- ={x=2036,m=264,a=79,s=2244}=: =in= -> =qqz= -> =hdj= -> =pv= -> =A=
- ={x=2461,m=1339,a=466,s=291}=: =in= -> =px= -> =qkq= -> =crn= -> =R=
- ={x=2127,m=1623,a=2188,s=1013}=: =in= -> =px= -> =rfg= -> =A=

Ultimately, three parts are accepted. Adding up the x, m, a, and s rating for
each of the accepted parts gives 7540 for the part with x=787, 4623 for the part
with x=2036, and 6951 for the part with x=2127. Adding all of the ratings for
all of the accepted parts gives the sum total of 19114.

Sort through all of the parts you've been given; what do you get if you add
together all of the rating numbers for all of the parts that ultimately get
accepted?

--- Part Two ---

Even with your help, the sorting process still isn't fast enough.

One of the Elves comes up with a new plan: rather than sort parts individually
through all of these workflows, maybe you can figure out in advance which
combinations of ratings will be accepted or rejected.

Each of the four ratings (=x=, =m=, =a=, =s=) can have an integer value ranging
from a minimum of =1= to a maximum of =4000=. Of all possible distinct
combinations of ratings, your job is to figure out which ones will be accepted.

In the above example, there are =167409079868000= distinct combinations of
ratings that will be accepted.

Consider only your list of workflows; the list of part ratings that the Elves
wanted you to sort is no longer relevant. How many distinct combinations of
ratings will be accepted by the Elves' workflows?
#+end_quote
